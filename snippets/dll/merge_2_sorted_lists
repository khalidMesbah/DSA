
	void merge_2sorted_lists(LinkedList &other) {	// O(n+m)
		if (!other.head)
			return;

		if (head) {
			Node* cur1 = head;
			Node* cur2 = other.head;
			Node* last { };
			head = nullptr;

			while (cur1 && cur2) {
				Node* next { };
				// pick the smallest among the 2 lists and then link it
				if (cur1->data <= cur2->data) {
					next = cur1;
					cur1 = cur1->next;
				} else {
					next = cur2;
					cur2 = cur2->next;
				}
				link(last, next);
				last = next;
				if (!head)	// first step is the head
					head = last;
			}
			if (cur2) {	// our tail is from 2nd
				tail = other.tail;
				link(last, cur2);
			} else if (cur1) {
				link(last, cur1);
			}
		} else {	// use its data
			head = other.head;
			tail = other.tail;
		}

		length += other.length;
		debug_data.insert(debug_data.end(), other.debug_data.begin(), other.debug_data.end());	// add other nodes
		other.head = other.tail = nullptr;
		other.length = 0;
		other.debug_data.clear();

		debug_verify_data_integrity();
	}
