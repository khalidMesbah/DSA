
  void delete_first() {
    if (head) {
      // Move to next in the list
      //  and remove current
      Node *cur = head;
      head = head->next;
      delete_node(cur);

      if (!head) // data integrity!
        tail = nullptr;
      debug_verify_data_integrity();
    }
  }

  void delete_first() {
    if (!head)
      return;

    Node *cur = head;
    head = head->next;
    delete_node(cur);

    if (!head) // data integrity!
      tail = nullptr;
    debug_verify_data_integrity();
  }

  void delete_first() {
    if (!head)
      return;

    Node *toDelete = head;

    !head->next ? head = tail = nullptr : head = head->next;

    delete_node(toDelete);

    debug_verify_data_integrity();
  }

  void delete_front() { // O(1) time - O(1) memory
    assert(length);
    Node *toDelete = head;
    head = head->next;

    if (!head) // Fix
      tail = head;

    delete_node(toDelete);

    debug_verify_data_integrity();
  }

  void delete_first() {
    if (!head)
      return;

    Node *new_head = head->next;
    delete_node(head);
    head = new_head;

    if (!head) // data integrity!
      tail = nullptr;
    debug_verify_data_integrity();
  }
