
  void insert_sorted(int value) {
    Node *new_node = new Node(value);
    if (!head) { // empty linked list
      head = tail = new_node;
    } else if (value <= head->data) { // insert at front
      new_node->next = head;
      head->prev = new_node;
      head = new_node;
    } else if (value >= tail->data) { // insert at end
      tail->next = new_node;
      new_node->prev = tail;
      tail = new_node;
    } else { // insert in the middle
      for (Node *cur = head; cur; cur = cur->next) {
        if (value <= cur->data) {
          cur->prev->next = new_node;
          new_node->prev = cur->prev;
          new_node->next = cur;
          cur->prev = new_node;
          break;
        }
      }
    }
    // for debugging
    add_node(new_node);
    debug_verify_data_integrity();
  }

  void insert_sorted(int value) { // O(n) time - O(1) memory
    // 3 special cases for simplicity
    if (!length || value <= head->data)
      insert_front(value);
    else if (tail->data <= value)
      insert_end(value);
    else {
      // Find the node I am less than. Then I am before it
      for (Node *cur = head; cur; cur = cur->next) {
        if (value <= cur->data) {
          embed_after(cur->prev, value);
          break;
        }
      }
    }
    debug_verify_data_integrity();

    // This idea is used in Insertion Sort Algorithm
  }
