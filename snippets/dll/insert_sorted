
  void insert_sorted(int value) { // O(n) time - O(1) memory
    // 3 special cases for simplicity
    if (!length || value <= head->data)
      insert_front(value);
    else if (tail->data <= value)
      insert_end(value);
    else {
      // Find the node I am less than. Then I am before it
      for (Node *cur = head; cur; cur = cur->next) {
        if (value <= cur->data) {
          embed_after(cur->prev, value);
          break;
        }
      }
    }
    debug_verify_data_integrity();

    // This idea is used in Insertion Sort Algorithm
  }

  void insert_sorted(int value) {
    if (!length || value <= head->data)
      insert_front(value);
    else if (value >= tail->data)
      insert_end(value);
    else {
      for (Node *cur = head; cur; cur = cur->next) {
        if (value <= cur->data) {
          Node *new_node = new Node(value);

          cur->prev->next = new_node;
          new_node->prev = cur->prev;

          new_node->next = cur;
          cur->prev = new_node;

          length++;

          debug_add_node(new_node);

          return;
        }
      }
    }
    debug_verify_data_integrity();
  }
